@using Kendo.Mvc.UI
@using HappyRE.Core.Entities
@model HappyRE.Core.Entities.ViewModel.PropertyListViewModel
@{
    ViewBag.Title = string.IsNullOrEmpty(@Model.Code) ? "Tạo bất động sản mới" : "BĐS: " + Model.Code;
}
<style>
    .img-list img {
        margin-right: 5px;
        margin-bottom: 5px;
    }
    table thead, table thead th.k-header {
        background-color: #ffc10e !important;
        font-weight: 600 !important;
        color: #333;
    }

    ul.img_list {
        list-style-type: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }
        ul.img_list li {
            float: left;
            margin-right: 10px;
        }

        ul.img_list img {
            height: 24px !important;
        }
    #_listImage .k-grid-content {
        height:auto !important;
        max-height:200px;
    }
    #_listImage .k-grid-header{
        display:none;
    }
    #_listImage.k-widget.k-grid{
        border:none;
    }

    .img_list.temp img{
        height:84px !important;
    }
</style>

<input type="hidden" id="canHideMobile" value="@(User.IsInRole(Permission.PROPERTY_CUSTOMER_INFO_HIDE) ? 1 : 0)" />
<input type="hidden" id="canDeleteImage" value="@(User.IsInRole(Permission.PROPERTY_DELETE) ? 1 : 0)" />

<div class="row">
    <div class="col-md-5">
        <dl class="dl-horizontal">
            @if (Model.IsTemp)
            {
                <dt>
                </dt>

                <dd>
                    <span class="label label-primary">Lưu tạm</span>
                </dd>
            }
            @if (Model.IsHot)
            {
                <dt>
                </dt>

                <dd>
                    <span class="label label-danger">HOT</span>
                </dd>
            }
            <dt>
                @Html.DisplayNameFor(model => model.PropertyNumber)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.PropertyNumber)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Code)
            </dt>

            <dd>
                <strong class="highlight">@Model.Code</strong>
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.StatusHtml)
            </dt>

            <dd>
                @Html.Raw(Model.StatusHtml)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.TypeHtml)
            </dt>

            <dd>
                @Html.Raw(Model.TypeHtml)
            </dd>


            <dt>
                @Html.DisplayNameFor(model => model.ContractId)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.ContractName)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.ContractCode)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.ContractCode)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Commission)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Commission)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.AddressHtml)
            </dt>

            <dd>
                @Html.Raw(Model.AddressHtml)
            </dd>


            <dt>
                @Html.DisplayNameFor(model => model.Office)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Office)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.RegionCode)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.RegionCode)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.MapCode)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.MapCode)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.LegalName)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.LegalName)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Price)
            </dt>

            <dd>
                <strong class="highlight">@Model.PriceDisplay</strong>
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.PriceMatched)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.PriceMatchedDisplay)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.PricePerArea)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.PricePerArea) <span>VNĐ</span>
            </dd>

            @*<dt>
            @Html.DisplayNameFor(model => model.CurrencyType)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.CurrencyType)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.CalcMethod)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.CalcMethod)
        </dd>*@
            <dt>
                @Html.DisplayNameFor(model => model.DirectionId)
            </dt>

            <dd>
                @Html.Raw(Model.DirectionName)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Width)
            </dt>

            <dd>
                <strong class="highlight">@Model.Width m</strong>
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Length)
            </dt>

            <dd>
                <strong class="highlight">@Model.Length m</strong>
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Area)
            </dt>

            <dd>
                <strong class="highlight">@Model.Area <span>m2</span></strong>
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.AreaForBuild)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.AreaForBuild) <span>m2</span>
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.NumOfBedroom)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NumOfBedroom)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.NumOfToilet)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NumOfToilet)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.NumOfFloor)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NumOfFloor)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.StreetWidth)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.StreetWidth) <span>m</span>
            </dd>


            <dt>
                @Html.DisplayNameFor(model => model.Note)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Note)
            </dd>

        </dl>
    </div>
    <div class="col-md-7">
        <dl class="dl-horizontal">
            @if ((bool)ViewBag.CanViewMobile == true)
            {
                <dt>
                    @Html.DisplayNameFor(model => model.OwnerName)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.OwnerName)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.OwnerPhone)
                </dt>

                <dd>
                    @if (Model.IsViewedMobileToday == true)
                    {
                        @Html.DisplayFor(model => model.OwnerPhone)
                    }
                    else
                    {
                        <span id="txt_phone" style="display:none;">@Model.OwnerPhone</span>
                        <a id="btn_phone" class='btn btn-default' onclick='propertyListing.showMobile("@Model.Id")'>XEM SĐT</a>
                    }
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.OwnerPhoneExt)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.OwnerPhoneExt)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.OwnerNote)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.OwnerNote)
                </dd>
                <hr />
            }



            <dt>
                @Html.DisplayNameFor(model => model.CreatedDate)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.CreatedDate)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.UpdatedDate)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.UpdatedDate)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.PostedHtml)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Posted) (<span class="link">@Model.PostedBy</span>)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.PostedBy)
            </dt>

            <dd>
                <span class="link">@Model.CreatedBy</span>
            </dd>

            @*<dt>
            @Html.DisplayNameFor(model => model.PostedDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.PostedDate)
        </dd>*@


            <dt>
                @Html.DisplayNameFor(model => model.PotentialHtml)
            </dt>

            <dd>
                @Html.Raw(Model.PotentialHtml)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.SourceName)
            </dt>

            <dd>
                @Html.Raw(Model.SourceName)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.UtilityId)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.UtilityHtml)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.StrongId)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.StrongHtml)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.WeakId)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.WeakHtml)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.ContructId)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.ContructHtml)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.StructureId)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.StructureHtml)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.DetailHtml)
            </dt>

            <dd>
                @Html.Raw(Model.DetailHtml)
            </dd>


            <dt>
                @Html.DisplayNameFor(model => model.IsGood)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.IsGood)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.IsChecked)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.IsChecked)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.IsVerified)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.IsVerified)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.VideoUrl)
            </dt>

            <dd>
                <a target="_blank" href="@Model.VideoUrl">@Model.VideoUrl</a>
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.ImageUrl)
            </dt>

            <dd>
                <div class="img-list">
                    @Html.Raw(Model.ImageHtml)
                </div>
            </dd>
            <dt>
                <label></label>
            </dt>

            <dd>
                @*@(Html.Kendo().Grid<HappyRE.Core.Entities.Model.ImageFile>()
            .Name("_listImage")
            .Columns(columns => columns.Bound(product => product.Src).Title("Ảnh thêm").ClientTemplate(@"
                      <div id='rowComment'>
                          <span id='timeInfo'>#=DateChangedFriendly#(#=DateChangedDisplay#) </span><strong style='color:red'>#=CreatedBy#</strong>: <img style='height:24px;' data-magnify='gallery' data-src='#=SrcOrigin#' src='#=Src#' />
                          <div id='deleteIcon'><a href='javascript:void();'><span class='#= bizHelper.renderCanDo('canDelete')# glyphicon glyphicon-remove' onclick='propertyDetail.onRemoveImg(#=Id#)'></span></a></div>
                      </div>"))
            .Scrollable(h => h.Height("200px"))
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("Search", "ImageFile", new { tableName = "Property", tableKeyId = @Model.Id }))
            )
            )*@
                @(Html.Kendo().Grid<HappyRE.Core.Entities.ViewModel.ImageFileViewModel>()
    .Name("_listImage")
    .Columns(columns => {
    columns.Bound(product => product.CreatedBy).Title("Ảnh thêm").ClientTemplate(@"
                    <div id='rowComment'>
                        <span id='timeInfo'>#=DateChangedFriendly#(#=DateChangedDisplay#) </span><strong style='color:red'>#=CreatedBy#</strong>
                    </div>");
                columns.Bound(e => e.SrcHtmlDisplay).Encoded(false).Title("");
            })
          .Scrollable(h => h.Height("200px"))
          .Events(events => events.DataBound("onDataBoundImgList"))
          .DataSource(dataSource => dataSource
              .Ajax()
              .Read(read => read.Action("Search", "ImageFile", new { tableName = "Property", tableKeyId = @Model.Id }))
          )
          )
                @(Html.Kendo().Upload().HtmlAttributes(new { accept = "image/*" })
        .Name("files")
        .Multiple(true)
        .ShowFileList(false)
        .Async(a => a
            .Save("Property", "Upload", new { Id = Model.Id})
                .Remove("Remove", "Upload")
                .AutoUpload(true)

            ).Events(events => events
                .Complete("baseUpload.onComplete")
                .Success("baseUpload.onSuccessMutilsMore")
                .Upload("onUpload")
                .Remove("baseUpload.onRemove")
            ))
                <form name="ajaxform" id="ajaxform" method="POST">
                    <input id="Id" name="Id" type="hidden" value="@Model.Id" />
                    <ul id="img_list_more" class="img_list temp">
                    </ul>
                    <input id="btn_upload_img" style="display:none;" onclick="propertyDetail.saveImage()" type="button" value="Lưu ảnh" class="btn btn-primary" />
                </form>
            </dd>
        </dl>
    </div>
</div>

<input type="hidden" id="canDelete" value="@(User.IsInRole(Permission.COMMENT_DELETE)?1:0)" />
<div>
    @(Html.Kendo().Grid<HappyRE.Core.Entities.Model.HistoryLog>()
          .Name("_list")
          .Columns(columns => columns.Bound(product => product.Contents).Title("Bình luận").ClientTemplate(@"
                    <div id='rowComment'>
                        <span id='timeInfo'>#=DateChangedFriendly#(#=DateChangedDisplay#) </span><strong style='color:red'>#=CreatedBy#</strong>: #=Contents#
                        <div id='deleteIcon'><a href='javascript:void();'><span class='#= bizHelper.renderCanDo('canDelete')# glyphicon glyphicon-remove' onclick='historyLog.onRemove(#=Id#)'></span></a></div>
                    </div>"))
          .Scrollable(h => h.Height("200px"))
          .DataSource(dataSource => dataSource
              .Ajax()
              .Read(read => read.Action("Search", "HistoryLog", new {tableName = "Property", tableKeyId = @Model.Id}))
          )
          )
    <br />
    <div class="comment-btn-block">
        @Html.TextArea("commentText", new {@class="comment-txt", onkeypress = "historyLog.sendCommentEnter('Property'," + @Model.Id + ")", placeholder = "Nhập nội dung để bình luận, enter hoặc nhấn gởi để lưu.", rows = 3 })
        <button class="k-button k-primary btn-send-comment" onclick="historyLog.sendComment('Property', @Model.Id)">GỬI</button>
    </div>
</div>

@if (User.IsInRole(Permission.PROPERTY_MODIFY_HISTORY))
{
<div class="track-history-changed" style="margin-top:30px;">
    <h4><span class="glyphicon glyphicon-time"></span> Lịch sử thay đổi</h4>
    @(Html.Kendo().Grid<HappyRE.Core.Entities.Model.TrackChange>()
      .Name("_listTrack")
      .Columns(columns =>
      {
          columns.Template(t => { }).ClientTemplate("#= baseListing.renderNumber(data) #").Title("#").Width(20);
          columns.Bound(e => e.UpdatedDate).ClientTemplate("<span>#=kendo.toString(UpdatedDate,'dd/MM/yyyy HH:mm:ss')#</span>").Width(150);
          columns.Bound(e => e.UpdatedBy).Width(160);
          columns.Bound(e => e.ColumnName).Width(180);
          columns.Bound(e => e.Old);
          columns.Bound(e => e.New);
      })
      .Scrollable()
          .Pageable(x => x.PageSizes(new[] { 20, 50 }))
          .Events(events => events.DataBound("onDataBound"))
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(20)
              .Model(model => model.Id(p => p.Id))
              .Events(events => events.Error("common.errorHandler"))
                      .Read(read => read.Action("SearchTrack", "HistoryLog").Data("additionalData"))
          )
)
</div>
}

<div class="foot-link">
    @Html.ActionLink("< Trở lại danh sách", "Index")

    @if (User.IsInRole(Permission.PROPERTY_DELETE) || (Model.IsTemp && Model.PostedBy == User.Identity.Name))
    {
        <button type='button' class='btn btn-danger' onclick="propertyListing.delete(@Model.Id)"><span class='k-icon k-delete'></span> Xóa</button>
    }

    @if (User.IsInRole(Permission.PROPERTY_MODIFY) || Model.PostedBy==User.Identity.Name)
    {
        @Html.ActionLink("Chỉnh sửa", "Edit", new { id = Model.Id }, new { @class = "btn btn-default" })
    }

</div>

@section Scripts{
    <script src="~/Scripts/app/property/historylog.js"></script>

    <script>
        var counter = 1;

        function onDataBound(e) {
            counter = 1;

            var grid = e.sender;
            console.log(grid.dataSource.total());
            if (grid.dataSource.total() == 0) {
                $('.track-history-changed').hide();
            }
            else {
                //Show grid
                $('.track-history-changed').show();
            }
        }

        function renderNumber(data) {
            return counter++;
        }

        function additionalData() {
            return {
                'TableKeyId': @Model.Id,
                'TableId': 'Property'
            }
        }

        function onDataBoundImgList() {
            var canDeleteImg = $('#canDeleteImage').val();
            if (canDeleteImg == "1") {
                $(".img_list li a").show();
            }
            else $(".img_list li a").hide();
        }
    </script>
    
}